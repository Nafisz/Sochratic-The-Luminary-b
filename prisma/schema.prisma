generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  username          String              @unique
  password          String
  age               Int
  email             String              @unique
  createdAt         DateTime            @default(now())
  sessions          Session[]
  userIntelProgress UserIntelProgress[]
}

model Session {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  completedAt  DateTime?
  status       SessionStatus @default(IN_PROGRESS)
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  topic        Topic      @relation(fields: [topicId], references: [id])
  topicId      String
  expPoints    ExpPoint[]
}

model ExpPoint {
  id          Int         @id @default(autoincrement())
  session     Session     @relation(fields: [sessionId], references: [id])
  sessionId   Int
  type        PaulsIntel     // enum
  value       Int
}

model Course {
  id          String   @id @default(cuid())
  title       String
  icon        String?
  description String
  content     Topic[]
  difficulty  String
  duration    String
  path        String?
  stage       String
  themeType   String    // "turth", "thought" or "ultra
  createdAt   DateTime  @default(now())
}

model Problem {
  id             String   @id @default(cuid())
  text           String
  topicId        String
  firstQuestion  String
  topic          Topic    @relation(fields: [topicId], references: [id])
}

model ActiveRecall {
  id             String   @id @default(cuid())
  test1          String
  test2          String
  test3          String
  test4          String
}

model Topic {
  id             String   @id @default(cuid())
  content        String
  problems       Problem[]
  session        Session[]
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id])
}

enum PaulsIntel {
  Clarity
  Accuracy
  Precision
  Relevance
  Depth
  Breadth
  Logic
  Significance
  Fairness
}

model PaulsIntelligenceLevel {
  id            Int             @id @default(autoincrement())
  type          PaulsIntel      // enum from 9 variance
  level         Int
  requiredExp   Int
  rewardDesc    String?
}


model UserIntelProgress {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  type      PaulsIntel
  exp       Int         @default(0)
  level     Int         @default(1)

  @@unique([userId, type]) // so that each user only has one progress per Intel type
}

model LevelHistory {
  id            Int        @id @default(autoincrement())
  userId        Int
  type          PaulsIntel
  oldLevel      Int
  newLevel      Int
  changedAt     DateTime   @default(now())
  note          String?
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

